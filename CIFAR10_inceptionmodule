import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms

batch_size = 64
transform = transforms.Compose([transforms.ToTensor(),
                                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
train = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=True, num_workers=2)

test = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
testloader = torch.utils.data.DataLoader(test, batch_size=batch_size, shuffle=False, num_workers=2)

classes = ('plane', ' car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

import matplotlib.pyplot as plt
import numpy as np

def imshow(img):
  img = img/ 2+0.5
  npimg = img.numpy()
  plt.imshow(np.transpose(npimg, (1, 2, 0)))
  plt.show()

dataiter = iter(trainloader)
images, labels = dataiter.next()

imshow(torchvision.utils.make_grid(images))

print(' '.join('%5s' % classes[labels[j]] for j in range(4)))

import torch.nn as nn
import torch.nn.functional as F

class Inception_module(nn.Module):
  def __init__(self, in_channels):
    super(Inception_module, self).__init__()
    # nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias, padding_mode)
    self.conv1x1 = nn.Conv2d(in_channels, 16, kernel_size=1)

    self.conv5x5_1 = nn.Conv2d(in_channels, 16, kernel_size=1)
    self.conv5x5_2 = nn.Conv2d(16, 24, kernel_size=5, padding=2)
    
    #nn.Linear(in_features, out_features, bias)
    self.conv3x3_1 = nn.Conv2d(in_channels, 16, kernel_size=1)
    self.conv3x3_2 = nn.Conv2d(16, 24, kernel_size=3, padding=1)
    self.conv3x3_3 = nn.Conv2d(24, 24, kernel_size=3, padding=1)

    self.branch_pool = nn.Conv2d(in_channels, 24, kernel_size=1)
    
  def forward(self, x):
    conv1x1 = self.conv1x1(x)

    conv5x5 = self.conv5x5_1(x)
    conv5x5 = self.conv5x5_2(conv5x5)

    conv3x3 = self.conv3x3_1(x)
    conv3x3 = self.conv3x3_2(conv3x3)
    conv3x3 = self.conv3x3_3(conv3x3)

    branch_pool = F.avg_pool2d(x, kernel_size=3, stride=1, padding=1)
    branch_pool = self.branch_pool(branch_pool)

    outputs = [conv1x1, conv5x5, conv3x3, branch_pool]

    return torch.cat(outputs,1)

class Net(nn.Module):
  def __init__(self):
    super(Net, self).__init__()
    # nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias, padding_mode)
    self.conv1 = nn.Conv2d(3, 10, kernel_size=5)
    self.conv2 = nn.Conv2d(88, 20, kernel_size=5)

    self.incep1 = Inception_module(10)
    self.incep2 = Inception_module(20)

    self.max_pool = nn.MaxPool2d(2)

    #nn.Linear(in_features, out_features, bias)
    self.fc = nn.Linear(2200, 10)
    
  def forward(self, x):
    in_size = x.size(0)
    x = F.relu(self.max_pool(self.conv1(x)))
    x = self.incep1(x)
    x = F.relu(self.max_pool(self.conv2(x)))
    x = self.incep2(x)
    x = x.view(in_size, -1)
    x = self.fc(x)
    return F.log_softmax(x)

# loss function과 optimizer 정의
model = Net().to(device)
criterion = nn.NLLLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum= 0.5)

def train(epoch):
  model.train()
  for i, (data, target) in enumerate(trainloader):
    data = data.to(device)
    target = target.to(device)

    output = model(data)

    optimizer.zero_grad()
    loss = criterion(output, target)
    loss.backward()
    optimizer.step()
    if i % 50 == 0:
      print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(epoch, i * len(data), 
                                                                     len(trainloader.dataset), 100. * i / len(trainloader), loss.item()))

def test():
  model.eval()
  test_loss = 0
  correct = 0
  for data, target in testloader:
    data = data.to(device)
    target = target.to(device)

    output = model(data)

    test_loss += criterion(output, target).item()

    pred = output.data.max(1, keepdim=True)[1]
    correct += pred.eq(target.data.view_as(pred)).cpu().sum()
  test_loss /= len(testloader.dataset)/batch_size
  print('Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(test_loss, correct, len(testloader.dataset), 100. * correct / len(testloader.dataset)))

for epoch in range(1, 10):
  train(epoch)
  test()
